ARG TERRAFORM_VERSION=v1.2
FROM quay.io/cloudnativetoolkit/terraform:${TERRAFORM_VERSION}-v2.0.0-alpine

ARG TARGETPLATFORM
ARG OPENSHIFT_CLI_VERSION=4.10

ENV TF_CLI_ARGS_apply="-parallelism=6"

RUN sudo apk add --no-cache \
  ca-certificates \
  perl \
  openvpn \
  && sudo rm -rf /var/cache/apk/*

WORKDIR $GOPATH/bin

COPY src/bin/* /usr/local/bin/

COPY --chown=devops:root src/home/ ${HOME}/

WORKDIR ${HOME}

RUN cat ./image-message >> ./.bashrc-ni

RUN curl -L https://mirror.openshift.com/pub/openshift-v4/$(if [[ "$TARGETPLATFORM" == "linux/arm64" ]]; then echo "arm64"; else echo "amd64"; fi)/clients/ocp/stable-${OPENSHIFT_CLI_VERSION}/openshift-client-linux.tar.gz --output oc-client.tar.gz && \
    mkdir tmp && \
    cd tmp && \
    tar xzf ../oc-client.tar.gz && \
    sudo mv ./oc /usr/local/bin && \
    cd .. && \
    rm -rf tmp && \
    rm oc-client.tar.gz

RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/$(if [[ "$TARGETPLATFORM" == "linux/arm64" ]]; then echo "arm64"; else echo "amd64"; fi)/kubectl" && \
    chmod +x ./kubectl && \
    sudo mv ./kubectl /usr/local/bin

RUN curl -sL -o ./yq3 $(curl -sL https://api.github.com/repos/mikefarah/yq/releases/tags/3.4.1 | jq -r --arg NAME "yq_linux_$(if [[ "$TARGETPLATFORM" == "linux/arm64" ]]; then echo "arm64"; else echo "amd64"; fi)" '.assets[] | select(.name == $NAME) | .browser_download_url') && \
    chmod +x ./yq3 && \
    sudo mv ./yq3 /usr/bin/yq3

RUN curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

## igc
RUN curl -sL -o ./igc https://github.com/cloud-native-toolkit/ibm-garage-cloud-cli/releases/download/v1.37.2/igc-alpine-$(if [[ "$TARGETPLATFORM" == "linux/arm64" ]]; then echo "arm64"; else echo "x64"; fi) && \
    chmod +x igc && \
    sudo mv igc /usr/local/bin

## gitu
RUN curl -sL -o ./gitu https://github.com/cloud-native-toolkit/git-client/releases/download/v1.13.4/gitu-alpine-$(if [[ "$TARGETPLATFORM" == "linux/arm64" ]]; then echo "arm64"; else echo "x64"; fi) && \
    chmod +x gitu && \
    sudo mv gitu /usr/local/bin

## kubeseal
RUN curl -sLo kubeseal.tar.gz https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.18.1/kubeseal-0.18.1-linux-$(if [[ "$TARGETPLATFORM" == "linux/arm64" ]]; then echo "arm64"; else echo "amd64"; fi).tar.gz && \
    mkdir tmp && \
    cd tmp && \
    tar xzf ../kubeseal.tar.gz && \
    chmod +x kubeseal && \
    sudo mv kubeseal /usr/local/bin && \
    cd .. && \
    rm -rf tmp && \
    rm kubeseal.tar.gz

## argocd
RUN curl -sLo argocd https://github.com/argoproj/argo-cd/releases/download/v2.4.6/argocd-linux-$(if [[ "$TARGETPLATFORM" == "linux/arm64" ]]; then echo "arm64"; else echo "amd64"; fi) && \
    chmod +x argocd && \
    sudo mv argocd /usr/local/bin

## kustomize
RUN curl -sLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.5/kustomize_v4.5.5_linux_$(if [[ "$TARGETPLATFORM" == "linux/arm64" ]]; then echo "arm64"; else echo "amd64"; fi).tar.gz && \
    mkdir tmp && \
    cd tmp && \
    tar xzf ../kustomize.tar.gz && \
    sudo mv kustomize /usr/local/bin && \
    cd .. && \
    rm -rf tmp && \
    rm kustomize.tar.gz

VOLUME /workspaces

ENTRYPOINT ["/bin/bash"]
